Here are some of the skills that you have learned:

Passing a prop by giving an attribute to a component instance
Accessing a passed-in prop via this.props.prop-name
Displaying a prop
Using a prop to make decisions about what to display
Defining an event handler in a component class
Passing an event handler as a prop
Receiving a prop event handler and attaching it to an event listener
Naming event handlers and event handler attributes according to convention
this.props.children
getDefaultProps


Don't Update props
You learned earlier that a component can change its state by calling this.setState(). You may have been wondering: how does a component change its props?
The answer: it doesn’t!

A component should never update this.props. Look at Bad.js to see an example of what not to do.
This is potentially confusing. props and state store dynamic information. Dynamic information can change, by definition. If a component can’t change its props, then what are props for?
A React component should use props to store information that can be changed, but can only be changed by a different component.
A React component should use state to store information that the component itself can change.

React Hooks - useState
With React, we feed static and dynamic data models to JSX to render a view to the screen

Use Hooks to “hook into” internal component state for managing dynamic data in function components

We employ the State Hook by using the code below:

currentState to reference the current value of state

stateSetter to reference a function used to update the value of this state

the initialState argument to initialize the value of state for the component’s first render

const [currentState, stateSetter] = useState( initialState );
Call state setters in event handlers

Define simple event handlers inline with our JSX event listeners and define complex event handlers outside of our JSX

Use a state setter callback function when our next value depends on our previous value

Use arrays and objects to organize and manage related data that tends to change together

Use the spread syntax on collections of dynamic data to copy the previous state into the next state like so: setArrayState((prev) => [ ...prev ]) and setObjectState((prev) => ({ ...prev }))

Split state into multiple, simpler variables instead of throwing it all into one state object